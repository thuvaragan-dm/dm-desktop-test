# .github/workflows/release-electron-app.yml
# This workflow runs in your PRIVATE source code repository (dm-desktop-test)
# but publishes releases to your PUBLIC release repository (dm-desktop-release)
# OR a separate DEV release repository (e.g., dm-desktop-dev-release).

name: Build and Release Electron App

on:
  push:
    tags:
      - "v*.*.*" # Production releases (e.g., v1.0.0)
      - "dev-v*.*.*" # Development releases (e.g., dev-v0.1.0-alpha)

jobs:
  release:
    runs-on: ${{ matrix.os }}

    # Conditionally select the GitHub Environment based on the tag prefix
    environment:
      name: ${{ startsWith(github.ref_name, 'dev-') && 'development' || 'production' }}
      # url: Can be set if you want a link in GitHub UI, e.g., to the release page upon completion.

    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]
        # Note on macOS runners:
        # - macos-latest is often an ARM (Apple Silicon) runner.
        # - electron-builder can typically create a 'universal' macOS build (x64 + arm64)
        #   on either an x64 or an arm64 runner if configured correctly.

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20" # Use the Node.js version from your root package.json

      - name: Install Dependencies
        # Runs 'npm ci' at the root of your repository
        run: npm ci

      - name: Build and Package Electron App
        # This command runs your 'build' script (defined in your root package.json)
        # which should execute 'tsc && vite build && electron-builder'.
        # The '--publish onTag' flag tells electron-builder to publish a release.
        run: npm run build -- --publish onTag
        env:
          # --- Publishing Token and Target ---
          # These are sourced from the selected GitHub Environment's secrets and variables.
          # GITHUB_TOKEN is used by electron-builder to authenticate for publishing.
          GITHUB_TOKEN: ${{ secrets.PAT_FOR_PUBLISH }}
          # GH_OWNER and GH_REPO tell electron-builder which repository to publish to,
          # overriding any 'repository' field in package.json for the publish target.
          GH_OWNER: ${{ vars.TARGET_OWNER }}
          GH_REPO: ${{ vars.TARGET_REPO_NAME }}

          # --- macOS Code Signing & Notarization Secrets (from GitHub Environment) ---
          # CSC_LINK and CSC_KEY_PASSWORD are used by electron-builder.
          # We conditionally select the correct secret based on the OS.
          #CSC_LINK: ${{ matrix.os == 'macos-latest' && secrets.APPLE_DEVELOPER_ID_P12_BASE64 || (matrix.os == 'windows-latest' && secrets.WINDOWS_PFX_BASE64) || '' }}
          #CSC_KEY_PASSWORD: ${{ matrix.os == 'macos-latest' && secrets.APPLE_DEVELOPER_ID_P12_PASSWORD || (matrix.os == 'windows-latest' && secrets.WINDOWS_PFX_PASSWORD) || '' }}

          # For Notarization (using App Store Connect API Key - recommended)
          # These secrets should also be defined in your GitHub Environments.
          #APPLE_API_KEY_ID: ${{ matrix.os == 'macos-latest' && secrets.APPLE_API_KEY_ID || '' }}
          #APPLE_API_ISSUER_ID: ${{ matrix.os == 'macos-latest' && secrets.APPLE_API_ISSUER_ID || '' }}
          #APPLE_API_KEY_CONTENT: ${{ matrix.os == 'macos-latest' && secrets.APPLE_API_KEY_P8_BASE64 || '' }}

          # OR For Notarization (using Apple ID - older method)
          # APPLE_ID: ${{ matrix.os == 'macos-latest' && secrets.APPLE_ID_EMAIL || '' }}
          # APPLE_ID_PASSWORD: ${{ matrix.os == 'macos-latest' && secrets.APPLE_APP_SPECIFIC_PASSWORD || '' }}
          # APPLE_TEAM_ID: ${{ matrix.os == 'macos-latest' && secrets.APPLE_TEAM_ID || '' }}

          # Note: Windows code signing secrets (WINDOWS_PFX_BASE64, WINDOWS_PFX_PASSWORD)
          # are handled by the CSC_LINK and CSC_KEY_PASSWORD lines above when matrix.os is 'windows-latest'.

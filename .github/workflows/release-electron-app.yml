# .github/workflows/release-electron-app.yml
# This workflow runs in your PRIVATE source code repository (dm-desktop-test)
# but publishes releases to your PUBLIC release repository (dm-desktop-release)
# OR a separate DEV release repository (e.g., dm-desktop-dev-release).

name: Build and Release Electron App

on:
  push:
    tags:
      - "v*.*.*" # Production releases (e.g., v1.0.0)
      - "dev-v*.*.*" # Development releases (e.g., dev-v0.1.0-alpha, dev-v1.0.0-dev.0)

jobs:
  release:
    runs-on: ${{ matrix.os }}

    # Conditionally select the GitHub Environment based on the tag prefix
    environment:
      name: ${{ startsWith(github.ref_name, 'dev-') && 'development' || 'production' }}
      # url: Can be set if you want a link in GitHub UI, e.g., to the release page upon completion.

    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]
        # Note on macOS runners:
        # - macos-latest is often an ARM (Apple Silicon) runner.
        # - electron-builder can typically create a 'universal' macOS build (x64 + arm64)
        #   on either an x64 or an arm64 runner if configured correctly.

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20" # Use the Node.js version from your root package.json

      - name: Install Dependencies
        # Runs 'npm ci' at the root of your repository
        run: npm ci

      # --- DEBUGGING STEP (Optional: Remove or comment out once everything works) ---
      - name: Debug Environment and Variables
        if: always() # Ensures this step runs even if previous steps fail, for debugging.
        run: |
          echo "Workflow triggered by tag: ${{ github.ref_name }}"
          echo "Condition for dev environment (startsWith 'dev-'): ${{ startsWith(github.ref_name, 'dev-') }}"
          echo "Selected environment should be: ${{ startsWith(github.ref_name, 'dev-') && 'development' || 'production' }}"
          echo "--- Values from selected GitHub Environment ---"
          echo "TARGET_OWNER (expected for GH_OWNER if used): ${{ vars.TARGET_OWNER }}"
          echo "TARGET_REPO_NAME (expected for GH_REPO if used): ${{ vars.TARGET_REPO_NAME }}"
          echo "--- Token Info ---"
          echo "Secret name used for GITHUB_TOKEN in next step: GH_RELEASE_PAT (Verify this is the name in your Environments)"
          if [ -n "${{ secrets.GH_RELEASE_PAT }}" ]; then # IMPORTANT: Use the actual secret name here
            echo "GH_RELEASE_PAT secret IS SET."
          else
            echo "GH_RELEASE_PAT secret IS NOT SET or empty (check environment: ${{ startsWith(github.ref_name, 'dev-') && 'development' || 'production' }})."
          fi
          echo "--- Checking other secrets for macOS (example, will only show if set) ---"
          if [ -n "${{ secrets.APPLE_DEVELOPER_ID_P12_BASE64 }}" ]; then
            echo "APPLE_DEVELOPER_ID_P12_BASE64 IS SET."
          else
            echo "APPLE_DEVELOPER_ID_P12_BASE64 IS NOT SET or empty."
          fi
        shell: bash
      # --- END OF DEBUGGING STEP ---

      - name: Build and Package Electron App
        # Conditionally runs the appropriate npm script for dev or prod packaging.
        # Assumes you have scripts like 'package:dev' and 'package:prod' in your package.json
        # which call electron-builder with --config electron-builder.development.json or electron-builder.production.json
        run: |
          if [[ "${{ github.ref_name }}" == dev-* ]]; then
            echo "Running DEVELOPMENT package script..."
            npm run package:dev -- --publish onTag
          else
            echo "Running PRODUCTION package script..."
            npm run package:prod -- --publish onTag
          fi
        env:
          # GITHUB_TOKEN is used by electron-builder to authenticate for publishing.
          # It's sourced from the selected GitHub Environment.
          # IMPORTANT: Ensure 'PAT_FOR_PUBLISH' is the actual name of the secret in your GitHub Environments.
          GITHUB_TOKEN: ${{ secrets.PAT_FOR_PUBLISH }}

          # GH_OWNER and GH_REPO are NO LONGER needed here for electron-builder's target,
          # as the target repository is now defined in the specific electron-builder config files
          # (e.g., electron-builder.development.json, electron-builder.production.json).

          # --- macOS Code Signing & Notarization Secrets (from GitHub Environment) ---
          # These are still needed if you're building for macOS and want signing/notarization.
          #CSC_LINK: ${{ matrix.os == 'macos-latest' && secrets.APPLE_DEVELOPER_ID_P12_BASE64 || (matrix.os == 'windows-latest' && secrets.WINDOWS_PFX_BASE64) || '' }}
          #CSC_KEY_PASSWORD: ${{ matrix.os == 'macos-latest' && secrets.APPLE_DEVELOPER_ID_P12_PASSWORD || (matrix.os == 'windows-latest' && secrets.WINDOWS_PFX_PASSWORD) || '' }}

          # For Notarization (using App Store Connect API Key - recommended)
          #APPLE_API_KEY_ID: ${{ matrix.os == 'macos-latest' && secrets.APPLE_API_KEY_ID || '' }}
          #APPLE_API_ISSUER_ID: ${{ matrix.os == 'macos-latest' && secrets.APPLE_API_ISSUER_ID || '' }}
          #APPLE_API_KEY_CONTENT: ${{ matrix.os == 'macos-latest' && secrets.APPLE_API_KEY_P8_BASE64 || '' }}

          # OR For Notarization (using Apple ID - older method)
          # APPLE_ID: ${{ matrix.os == 'macos-latest' && secrets.APPLE_ID_EMAIL || '' }}
          # APPLE_ID_PASSWORD: ${{ matrix.os == 'macos-latest' && secrets.APPLE_APP_SPECIFIC_PASSWORD || '' }}
          # APPLE_TEAM_ID: ${{ matrix.os == 'macos-latest' && secrets.APPLE_TEAM_ID || '' }}
